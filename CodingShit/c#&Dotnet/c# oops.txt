c# oops 

 OOP, or Object-Oriented Programming, in C# is a programming paradigm that structures software design around "objects" rather than actions or
 functions.The core idea is to model real-world entities and their interactions within your code. This is achieved by encapsulating both data 
 (attributes or properties) and the functions that operate on that data (methods) within self-contained units called "objects." These objects 
 are created from "classes," which serve as blueprints defining their structure and behavior.


object is declare by  class and its can have modifier

A constructor in C# is a special method that's automatically called when an object is created from a class.
 Its main purpose is to initialize the object, often by assigning values to its fields or setting up any dependencies it needs.
Type of coustructors-
    Default Constructor - Static variable 
    Parameterized Constructor -
    Copy Constructor - use to deep copy object (clone object)
    Static Constructor - need to understand more
    Private Constructor - class with private constructor cannot be initiated or create an object of constructor
        use - to create the instance of certain utility and common routin class.(Used in singleton pattern)

Type of classes
-Concrete Class
- Abstract Class
- Static Class
- Partial Class
- Sealed Class
- Generic Class
- Nested Class8. Record Class (C# 9+)

static class
     use - it is use as a container to declare static property and method.
    static class are created when the application is running, static class cannot implement an interface 
    you cannot pass static class as a parameter of method or function.

Extension methods -  
    it allow us to add new method into existing class without modifying the source code of original class. it must be static.
    it is used when we need to use some method throughout the application.
    method contains this keyword followed by Class Name of extension.


4 pillars-
    Inheritance 
    Encaptulation
    Polymorphism
    Data Abstraction

        Inheritance - is creating parent child relationship between class where child class will automatically get the property and method of parent class.
            Use - reusability (Eg. Parent-car Class child- EVCar , HybridCar , ICCar etc with some common property and methods of parent class.)
            Types-
            Single Inheritance
            Multiple Inheritance - in c# multiple inheritance is not possible. Alternative is to create multiple interfaces.
            Multilevel Inheritance.
            hierarchical inheritance.

            If same method is present in both parent and derived class it is managed by virtual and override keywords.

            Sealed and staic keyword is use to prevent class form inheritance.or a method from being overridden.
            Diffrence - you can create object of sealed class but you can't create object of static class.we can't inherit sealed


            we can call the constructor of the base class from the derived class like -
                    public class TestClass2 : TestClass1
                    public TestClass2 (string str1,string str2): base(str1,str2) //Calling base constructor explicitly
                    {
                    }
                

        Encaptulation - Bundling data and methods that operate on the data into a single unit (class).
            achived by class identifiers (public,private etc)
            generally the private field is created and accessed with get set property.


        Abstraction-
        The concept of hiding the complex implementation details and showing only the necessary features of an object. In C#, this is achieved using abstract classes and interfaces.
             can be achived with abstract classes and interfaces.

                Diffrence Between interfaces and abstract classes
                    object of abstract class cannot be created and it can contain both abstract and regular method
                    interfaces only contains body and cannot contains field
                    Interface members are by default abstract and public
                    An interface cannot contain a constructor (as it cannot be used to create objects)
                    C# does not support "multiple inheritance" (a class can only inherit from one base class).
                    However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).
                    Abstract class can contain different types of access modifiers like public, private, protected etc. Interface contains public access modifier because everything in the interface is public.
                    Abstract classes also have the added benefit in polymorphismâ€“allowing you to use the (abstract) superclass's type as a method argument or a return type. If for example you had a PetOwner
                    class with a train() method you can define it as taking in an object of type Animal e.g. train(Animal a) as opposed to creating a method for every subtype of Animal.

                abstract calss
                    abstract modifier in a class declaration to indicate that a class is intended only to be a base class of other classes, not instantiated on its own
                    An abstract class may contain abstract methods and accessors.
                    A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.
                    It is an error to use the static or virtual modifiers in an abstract method declaration.

        Polymorphism - The ability of an object to take on many forms. In C#, it allows objects of different classes to be treated as instances of a common base class.
         It's achieved through method overloading (compile-time polymorphism) and method overriding (run-time polymorphism).
            Compile time - method overloading ,operator overloading
            runtime - virual and override 


Destructor-
    A Destructor is used to free the dynamically allocated memory and release the resources. It is instantly invoked when the Object is destroyed.

Diffrence Between class and structure
    A struct is a value type, whereas a class is a reference type.
    struct is stack type and class is heap type
    struct is value type and class is reference type
    inheritance not supported , class supported
    parameterless counstructor not supported , class supported
    Assignment Operation	Copies the value ,	Copies the reference


Dependency Injection
    Dependency injection is use to create less coupled code and it will create centeralized intiation insted of , initialization of code every places.
    thus if code changes or parameter changes we didn't have to change it in every places.
    types-
        transient - for each use create new instance of object.
        singleton - only one instance is created for all application.
        scoped - hybrid maintain the access 
    we can use DI with constructor Injection,property and function injection.
    (there are diffrent type of Dependency Injection containers)


Singleton 
    Only make one instance of class . Make sure to make it thread safe by using lock.
    Use cases - when there is may to one relation and different resource need to access one instance of class.
    eg- logging service. (tip make singleton pattern for read-only things). Alternatives DI and 15:39 30-06-2024 class.


SOLID Principles
    Single Responsibility Principles - calss should have single Responsibility and should do what it ment to be.
    Open Close Principles - class should be open for extenttion but closed for modification ( we can ass extra functionality but cant change the core functionality )  
    Liskoves Principles - subclass can be substituted for there parent class
    Interface Segregation Principles - Unrelated interfaces should be seprated Clients should not be force to implement something they dont need   
    Dependency Inversion Principles - Classes should be depend upon abstraction and not concrete classes.

    
Lazy Loading in c#
    Generally used with entitiy framework
    Loads the data for the first time when used not when object is created.
    Using IEnumerable in c# acessing db entitiy is by default lazy laoding.
    Does not load child elements if you dont ask for it.

    Include and thenInclude in EntiyFrameWork will egarload all childdata.
    Entry and Collection,refrence is use for Explicit loading.

    Lazy Loading
     - Default behavior of EF
     - Loads data when it is accessed for the first time
     - Does'nt load the child element if you do not ask it for
     - Multiple Query Execute within child element   
                
    Egar Loading 
    - Include will load all the child entity bbase on th foreign key .
    - It will increase the transfer data amount and but decrease the amount of query hits
    Explicit Loading - 

var vs dynamic
    changing type in code will give error after declaration in var and dynamic will not give compile time error.


Generic in c#
    it allow us to make the method type independent or typesafe .
    we can also create generic classes and it can be use so that we didn't have to put type in front of every method while using generic methods.

Generic Class in c#
    A generic class in C# is a class that is defined with type parameters so it can operate on any data type in a type-safe manner.
    Instead of writing multiple versions of the same class for different data types, you define one generic class that works with all types
    Uses - 
    Collections -List<T>, Dictionary<TKey, TValue>, Data containers - 	Box<T>, Result<T>
    Utility/helper classes -Comparer<T>, EqualityComparer<T> , Generic repositories in DB layer -	Repository<T> in Entity Framework

Tuples
    In C#, tuples are lightweight data structures that group multiple elements into a single object. They can hold items of different types and are often used when you want to return multiple values from a method without creating a custom class or struct.

    Old-style Tuple class (pre-C# 7.0)
    Tuple<int, string> person = new Tuple<int, string>(1, "Alice");
    Console.WriteLine(person.Item1); // 1
    Console.WriteLine(person.Item2); // Alice

    2. New-style ValueTuple (C# 7.0 and later)
    var person = (Id: 1, Name: "Alice");
    Console.WriteLine(person.Id);   // 1
    Console.WriteLine(person.Name); // Alice



IEnumberable - It is basically use to iterate over list of Class or type like string int etc.
    List<T> is derived from IEnumerable And IEnumerator.

IQueryable - Iqueryable is inherited form IEnumerable so anything that you can do in the IEnumerable can be done in IQueryable 

    Difference IEnumerable is used with in memory object like list and array. IQueryable is better getting result from database.
    IEnumerable will get the whole data from database and then perform filtration while in Iqueryable it will fetch only filtered data from database.
    IQuerable is in SYSTEM.LINQ namespace and IEnumerable is in SYSTEM.Collection namespace.

Transaxtion in EF core- bContext.Database.BeginTransaction() : 
    AsNoTracking() is use to 
Concurrency Handling in EF Core?
Global Query Filters in EF Core?


.Skip().Take() is use for pagination in EFCore

Delegates - Delegates in C# are similar to the function pointer in C/C++. Delegates are the library class in System namespace.
    These are the type-safe pointer of any method.
    Delegates are mainly used to implementing the callback method and events.
    Delegates can be chained together as two or more methods can be called on a single event.
    It doesnâ€™t care about the class of the object that it references.
    A delegate will call only a method which agrees with its signature and return type. A method can be a static method associated with a class or can be an
     instance method associated with an object, it doesnâ€™t matter. 

Since C# 8, default implementations can also be included in interfaces.

C# Access Modifiers
    In C#, members of a class can be marked with access modifiers, including public and private. A public member can be accessed by other classes. A private member can only be accessed by code in the same class.
    By default, fields, properties, and methods are private, and classes are public.
    Access modifiers are keywords used to specify the declared accessibility of a member or a type. They are crucial for implementing the principle of encapsulation by controlling which parts of your code can access an object's members.
        public: Accessible by any code in the same assembly or another assembly that references it.
        private: Accessible only within the class or struct in which it is declared.
        protected: Accessible within the containing class and by types derived from the containing class.
        internal: Accessible only within the same assembly.
        protected internal: Accessible within the current assembly and by types derived from the containing class in any assembly.
        private protected: Accessible within the containing class or by types derived from the containing class, but only within the same assembly.
    Encapsulation uses these modifiers to hide the internal state of an object and expose a controlled interface through public methods or properties, which prevents direct, uncontrolled modification of the data. 
        For example, a bank account's balance field can be private while Deposit and Withdraw methods are public.

C# Field
In C#, a field stores a piece of data within an object. It acts like a variable and may have a different value for each instance of a type.
A field can have a number of modifiers, including: public, private, static, and readonly. If no access modifier is provided, a field is private by default.

C# this Keyword
In C#, the this keyword refers to the current instance of a class.
    1. Accessing Instance Members
    2. Calling Another Constructor (Constructor Chaining) [ public Person(string name) : this(name, 0) { }]
    3. Passing the Current Object as a Parameter
    4. Extending the Current Object (In Extension Methods)

C# Members
In C#, a class contains members, which define the kind of data stored in a class and the behaviors a class can perform. 

Extension Methods
    Extension methods are special static methods that can be called as if they were instance methods of an existing type.
    we can also create extention method for IEnumerable.
    They are a convenient way to add new methods to an existing class without changing the original source code or inheriting from the class.
    Extension methods look and behave like instance methods, but there are a few important differences to keep in mind:
    Extension methods cannot access private members of the extended type.
    They also do not participate in inheritance or polymorphism.
    You cannot override an existing method with an extension method.


is, as, and typeof in C#
    is â€“ Checks object type.
    as â€“ Casts object safely (returns null if cast fails).
    typeof â€“ Gets type at compile time.

base is used to:
    Call base class constructor.
    Access base class methods/properties that are overridden.

What is the use of the readonly keyword in C#?
    readonly fields can only be assigned during declaration or in a constructor.
    Itâ€™s used to create immutable objects.

Mutable vs Immutable objects
    A mutable object is one whose fields or properties can be changed after the object is created.
    An immutable object is one whose state cannot be changed after it is created.
        Fields or properties are set at creation time and never change.Fields are readonly or have private setters.
        Common Immutable Types in .NET: System.String, System.DateTime, System.Guid, System.Uri, System.Tuple<>, System.ValueTuple<> (if not mutated)

Difference between const, readonly, and static
    Keyword	    Meaning	                    Assigned	                        Scope
    const	    Compile-time constant	At declaration only	                Static by default
    readonly	Runtime constant	    In constructor	                    Instance-level
    static	    One per type	        Any time	                        Shared by all instances

To LEARN
value type and refrence type
Boxing and Unboxing.
repository pattern
implicit and explicit interface
staic and non static memebers
Exception and multiple exception    
async await 
threading   

Yes, one can create an Object Creation by using the following methods-

Abstract Class, Static Class, Private or Protected Constructor.




Sealed
    In C#, the sealed keyword is used to prevent further inheritance of a class or override of a method.
    1. Sealed Class
        A sealed class cannot be inherited by any other class.
    2. Sealed Method
        A sealed method is used inside a derived class to prevent further overriding of a virtual method from the base class.

You Cannot Seal:
Static classes (they are already implicitly sealed).
Abstract classes (contradictory: abstract = incomplete, sealed = locked).